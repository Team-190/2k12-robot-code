package edu.wpi.first.wpilibj.robottesting;

import edu.wpi.first.wpilibj.robottesting.AssertionFailure.Level;

/**
 * Assertion which generates messages on failure.
 * 
 * @author pmalmsten
 */
public abstract class Assertion {
    /**
     * Internal exception thrown when an assert*() call fails
     */
    protected class AssertionFailureException extends Exception {
        private String m_exceptionName;
        private String m_exceptionDescription;
        private Level m_level;

        /**
         * Create a new AsssertionFailureException.
         *
         * @param m_shortName The short name of the test which failed.
         * @param m_description A description of the failure.
         * @param m_level The severity level of the failure.
         */
        public AssertionFailureException(String m_shortName, String m_description, Level m_level) {
            this.m_exceptionName = m_shortName;
            this.m_exceptionDescription = m_description;
            this.m_level = m_level;
        }

        /**
         * Returns the short name of the test which caused this failure.
         * 
         * @return The short name of the test which failed.
         */
        public String getName() {
            return m_exceptionName;
        }

        /**
         * Returns the description of the failure that occurred.
         * 
         * @return A description of why this failure occurred.
         */
        public String getFailureDescription() {
            return m_exceptionDescription;
        }

        /**
         * Returns the severity level of the failure that occurred.
         *
         * @return The severity level of the failure that occurred.
         */
        public Level getLevel() {
            return m_level;
        }

        /**
         * Gets an AssertionFailure object containing the data of this
         * AssertionFailureException.
         *
         * @return An equivalent AssertionFailure object containing all of the
         *  information in this AssertionFailureException.
         */
        public AssertionFailure getAssertionFailure() {
            return new AssertionFailure(m_exceptionName, m_exceptionDescription, m_level);
        }
    }

    protected String m_shortName;
    protected AssertionFailure.Level m_level;
    protected ProblemHandler m_handler;

    /**
     * Create a new Assertion object. AssertionFailures generated by this
     * Assertion will assume the given severity level.
     *
     * @param shortName The short name of the test this Assertion represents.
     * @param level The severity level of failures generated by this assertion.
     * @param handler The handler which should accept AssertionFailure objects
     *  generated by this assertion.
     */
    public Assertion(String shortName, Level level, ProblemHandler handler) {
        m_shortName = shortName;
        m_level = level;
        m_handler = handler;
    }

    /**
     * Create a new Assertion object, and publishes AssertionFailure messages
     * to the singleton ProblemManager. AssertionFailures generated by this
     * Assertion will assume the given severity level.
     *
     * @param shortName The short name of the test this Assertion represents.
     * @param level The severity level of failures generated by this assertion.
     */
    public Assertion(String name, Level level) {
        this(name, level, ProblemManager.getInstance());
    }

    /**
     * Evaluate this assertion. If it fails, an AssertionFailure object is
     * generated and passed to this Assertion's associated ProblemHandler.
     */
    public void check() {
        try {
            evaluate();
        } catch (AssertionFailureException ase) {
            m_handler.handleProblem(ase.getAssertionFailure());
        }
    }

    /**
     * Defines the check which this Assertion represents. It should use the
     * various assert* methods provided by this Assertion object.
     *
     * @throws edu.wpi.first.wpilibj.reliability.assertion.Assertion.AssertionFailureException
     */
    protected abstract void evaluate() throws AssertionFailureException;

    /* Begin Assertions */

    /**
     * Assert that an expression evaluates to true.
     * 
     * @param expr The result of the expression to check.
     * @param message The description to pass along if this assertion fails.
     * @throws edu.wpi.first.wpilibj.reliability.assertion.Assertion.AssertionFailureException
     */
    protected void assertTrue(boolean expr, String message) throws AssertionFailureException {
        if(!expr)
            throw new AssertionFailureException(m_shortName, message, m_level);
    }

    /**
     * Assert that an expression evaluates to true.
     * 
     * @param expr The result of the expression to check.
     * @throws edu.wpi.first.wpilibj.reliability.assertion.Assertion.AssertionFailureException
     */
    protected void assertTrue(boolean expr) throws AssertionFailureException {
        assertTrue(expr, "");
    }

    /**
     * Assert that the given doubles are equal within the given tolerance.
     *
     * @param expected The expected value.
     * @param actual The actual value, to be compared against the expected value.
     * @param tolerance The tolerance within which to compare the expected value
     *  to the actual value.
     * @param message The message to pass along if this assertion fails.
     * @throws edu.wpi.first.wpilibj.reliability.assertion.Assertion.AssertionFailureException
     */
    protected void assertEqual(double expected, double actual, double tolerance, String message) throws AssertionFailureException {
        if(Math.abs(expected - actual) > tolerance)
            throw new AssertionFailureException(m_shortName, message, m_level);
    }

    /**
     * Assert that the given doubles are equal within the given tolerance.
     *
     * @param expected The expected value.
     * @param actual The actual value, to be compared against the expected value.
     * @param tolerance The tolerance within which to compare the expected value
     *  to the actual value.
     * @throws edu.wpi.first.wpilibj.reliability.assertion.Assertion.AssertionFailureException
     */
    protected void assertEqual(double expected, double actual, double tolerance) throws AssertionFailureException {
        assertEqual(expected, actual, tolerance, "");
    }

    /* End Assertions */
}

package edu.wpi.first.wpilibj.robottesting;

import edu.wpi.first.wpilibj.robottesting.AssertionFailure.Level;

/**
 * This assertion will generate a failure only once when checked; after a failure,
 * it is no longer evaluated.
 * 
 * @author pmalmsten
 */
public abstract class OneShotAssertion extends Assertion {
    private boolean m_hasFailed = false;

    /**
     * Creates a new {@link Assertion} with the given name. AssertionFailures
     * generated by this Assertion will assume the given severity level.
     *
     * @param name The name of the test.
     * @param level The severity of the errors generated by this assertion.
     */
    public OneShotAssertion(String name, Level level) {
        super(name, level);
    }

    /**
     * Creates a new {@link Assertion} with the given name. AssertionFailures
     * generated by this Assertion will assume the given severity level.
     *
     * @param name The name of the test.
     * @param level The severity of the errors generated by this assertion.
     * @param ph The handler to be notified of AssertionFailures.
     */
    public OneShotAssertion(String name, Level level, ProblemHandler ph) {
        super(name, level, ph);
    }

    /**
     * Evaluate this assertion. If it fails, an AssertionFailure object is
     * generated and passed to this Assertion's associated ProblemHandler.
     *
     * After the first failure of this Assertion, this method does nothing.
     */
    public void check() {
        if(m_hasFailed)
            return;

        try {
            evaluate();
        } catch (AssertionFailureException afe) {
            m_handler.handleProblem(afe.getAssertionFailure());
            m_hasFailed = true;
        }
    }
}
